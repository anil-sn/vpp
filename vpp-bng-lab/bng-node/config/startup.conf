# =========================================================================
# VPP BNG Lab - VPP Startup Configuration
#
# This file provides explicit startup configuration for the VPP process.
# =========================================================================

unix {
  # Run VPP in the foreground, do not fork a daemon process.
  # This is standard practice for containerized applications.
  nodaemon

  # Path for the VPP log file.
  log /var/log/vpp/vpp.log

  # Generate a full core dump on crash for easier debugging.
  full-coredump

  # Define the path for the command-line interface (CLI) socket.
  # This is the file 'vppctl' connects to.
  cli-listen /run/vpp/cli.sock

  # Set the group ownership for the created unix files.
  gid vpp
}

api-segment {
  # Set the group ownership for the binary API shared memory segment.
  gid vpp
}

# The plugins section provides fine-grained control over which plugins
# are loaded at startup. This is crucial for creating a deterministic
# and minimal BNG environment.
plugins {
  #
  # Step 1: Disable all plugins by default.
  # This ensures that no unexpected or unnecessary features are loaded.
  #
  plugin default { disable }

  #
  # Step 2: Explicitly enable only the plugins required for our BNG.
  #
  
  # Core networking plugins
  plugin acl_plugin.so         { enable } # Access Control Lists
  plugin dhcp_plugin.so         { enable } # DHCPv4/v6 Relay and Proxy
  plugin dns_plugin.so          { enable } # DNS forwarder/cache
  plugin icmp_plugin.so         { enable } # ICMP (Ping) support
  plugin ip4_lookup_plugin.so   { enable } # IPv4 routing
  plugin ip6_lookup_plugin.so   { enable } # IPv6 routing
  plugin ethernet_plugin.so     { enable } # Basic Ethernet packet processing
  plugin arp_plugin.so          { enable } # ARP for IPv4 neighbor discovery
  plugin ip6_nd_plugin.so       { enable } # Neighbor Discovery for IPv6

  # Interface driver plugins
  plugin af_packet_plugin.so    { enable } # Driver for host kernel interfaces ('host-interface')
  plugin vlan_plugin.so         { enable } # Driver for VLAN sub-interfaces
  
  # NAT plugin (useful for future expansion, optional)
  # plugin nat_plugin.so          { enable }

  # Add other plugins here as needed for future features.
}